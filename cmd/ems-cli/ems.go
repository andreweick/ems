package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	photo "github.com/missionfocus/ems/internal"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type CfiResponse struct {
	Result struct {
		ID                string    `json:"id"`
		Filename          string    `json:"filename"`
		Uploaded          time.Time `json:"uploaded"`
		RequireSignedURLs bool      `json:"requireSignedURLs"`
		Variants          []string  `json:"variants"`
	} `json:"result"`
	ResultInfo interface{}   `json:"result_info"`
	Success    bool          `json:"success"`
	Errors     []interface{} `json:"errors"`
	Messages   []interface{} `json:"messages"`
}

func main() {
	const dirname = "/Volumes/Mini Pudge/backblaze-ignored/photomechanic-export/"

	files, err := ioutil.ReadDir(dirname)
	if err != nil {
		log.Fatal(err)
	}

	for _, file := range files {
		if file.IsDir() || strings.HasPrefix(file.Name(), ".") {
			continue
		}

		var pmd *photo.MetaData
		pmd = photo.NewPMD(dirname + file.Name())

		fmt.Printf("Name: %s, CaptureDate: %v, Headline: %s\n", file.Name(), pmd.CaptureDate, pmd.Description)

		file, err := os.Open(dirname + file.Name())
		if err != nil {
			log.Fatalf("1. err: %x", err)
		}

		body := &bytes.Buffer{}
		writer := multipart.NewWriter(body)
		part, err := writer.CreateFormFile("file", filepath.Base(dirname+file.Name()))

		if err != nil {
			log.Fatalf("2. err: %x", err.Error())
		}

		_, err = io.Copy(part, file)
		if err != nil {
			log.Fatalf("3. err: %x", err.Error())
		}

		file.Close()

		partId, err := writer.CreateFormField("id")
		idByte := []byte(file.Name())
		partId.Write(idByte)

		writer.Close()

		if err != nil {
			log.Fatalf("4. err: %x", err.Error())
		}

		// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

		// curl -X POST -F file=@/Volumes/Mini\ Pudge/edc/photographs/20161029-game-7-2020.jpg -H "Authorization: Bearer <token>" https://api.cloudflare.com/client/v4/accounts/5930846a5870031c415bb26e42e38833/images/v1

		req, err := http.NewRequest("POST", "https://api.cloudflare.com/client/v4/accounts/"+"5930846a5870031c415bb26e42e38833"+"/images/v1", body)

		if err != nil {
			log.Fatalf("5. err: %x", err.Error())
		}

		var cloudflareResponse CfiResponse

		req.Header.Set("Authorization", "Bearer "+os.Getenv("CF_IMAGES_STREAM_READ_ONLY"))
		req.Header.Set("Content-Type", writer.FormDataContentType())

		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			log.Fatalf("6. err: %x", err.Error())
		} else {
			bodyJson := &bytes.Buffer{}
			_, err := bodyJson.ReadFrom(resp.Body)
			if err != nil {
				log.Fatalf("7. err: %x", err.Error())
			}

			decoder := json.NewDecoder(bodyJson)
			err = decoder.Decode(&cloudflareResponse)
			if err != nil {
				log.Printf("8. err: %x", err.Error())
				cloudflareResponse.Success = false
			}
			resp.Body.Close()
		}
	}
}
